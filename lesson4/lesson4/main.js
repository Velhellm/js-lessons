//1. Написать функцию возведения числа в степень.

function degree(num, rate = 2){
    if(rate === 0) return 1; //если rate == 0, возвращаем 1. После возврата полученный результат умножаем на num.
    else return degree(num, --rate) * num; //иначе возвращаем --rate. Как только цикл вызовов дойдет до нуля, вернется единица и умножится на num.
}

/*----------------------------------------------*/

//2. Написать функцию поиска наибольшего общего делителя.  

function divider(x, y){  //если при делении 2х чисел остаток равен нулю, то оно является наибольшим делителем
    if(y === 0) return x;   //если y равен нулю, возвращаем x, который будет являться наибольшим общим делителем 
    else return divider(y, x % y); //иначе передаём в функцию делимое (y) и остаток от деления x % y до тех пор, пока остаток не будет равен нулю
}


/*----------------------------------------------*/

// 3. Написать функцию для поиска максимальной цифры в числе.

function maxNumber(num){  
    if(num > 1){    
        let x = num %10 //делим полученное число на 10, чтобы отделять по 1 цифре и записывать их в переменную x до тех пор, пока число не станет <=1
        let y = maxNumber(Math.trunc(num / 10));
        return x > y ? x : y;
    }
    else return 0; //в случае, когда значение num <= 1, возвращаем 0 и завершаем цикл
}

/*----------------------------------------------*/

// 4. Написать функцию, которая определяет, простое ли переданное число.

function simpleNum(num, fnc = num - 1){ //зададим функцию fnc для проверки в диапазоне от num-1 до 2
    if(fnc === 1) return simple;  // если при проверке дошли до 1 без делителя, то число простое, возвращаем simple
    if(num % fnc === 0) return complex //если нашли делитель без остатка, то число сложное, возвращаем complex
    if(num ===1) return one //единица не является простым или сложным числом, её возвращаем отдельно
    else return simpleNum (num, --fnc) //если вышеперечисленные условия не подошли, уменьшаем значение fnc на 1 и повторяем процесс
}

/*----------------------------------------------*/

// 5. Написать функцию для вывода всех множителей переданного числа в возрастающем порядке
// Например: число 18, множители 2 * 3 * 3.

//Воспользуемся пустым массивом для хранения значений, а так же временной функции temp, для хранения делителя
function decomposition(num, array = [], temp = 2 ){
    if(temp > Math.sqrt(num)){ //в случае, если переменная больше корня из числа num, то это либо меньший, либо единственный делитель
        array.push(num); //записываем значение в массив
        return array
    }
    else if(num % temp == 0){   //если число делится на переменную без остатка, добавляем переменную в массив
        array.push(temp);
        decomposition(num / temp, array, temp)  // передаём результат деления на следующий уровень и делим на то же число 
    }
    else decomposition(num, array, temp++)  //если в предыдущем шаге число не делится на переменную, возвращаем число, а к переменной добавляем единицу
    return array.join(" * ")    //замена делителей на "*"
}

/*----------------------------------------------*/

// 6. Написать функцию, которая возвращает число Фибоначчи по переданному порядковому номеру.
// Каждое последующее число равно сумме 2х предыдущих

function fibNum(x){
    if( x <=1 ) return x;   //если число достигло единицы, то завершаем цикл и возвращаем число
    else return fibNum(x - 1) + fibNum(x - 2);    //иначе действуем по формуле: каждое последующее число равно сумме 2х предыдущих, вызываем предыдущие числа и складываем их
}